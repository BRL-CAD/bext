diff -Naur OpenShadingLanguage/src/cmake/Config.cmake.in OpenShadingLanguage_BLD/src/cmake/Config.cmake.in
--- OpenShadingLanguage/src/cmake/Config.cmake.in	2023-09-20 21:22:54.885148544 -0400
+++ OpenShadingLanguage_BLD/src/cmake/Config.cmake.in	2023-09-25 21:05:34.672936351 -0400
@@ -8,7 +8,7 @@
 
 # add here all the find_dependency() whenever switching to config based dependencies
 if (@OpenEXR_VERSION@ VERSION_GREATER_EQUAL 3.0)
-    find_dependency(Imath @Imath_VERSION@)
+    find_dependency(OpenEXR @OpenEXR_VERSION@)
 elseif (@OpenEXR_VERSION@ VERSION_GREATER_EQUAL 2.4 AND @FOUND_OPENEXR_WITH_CONFIG@)
     find_dependency(IlmBase @OpenEXR_VERSION@)
     find_dependency(OpenEXR @OpenEXR_VERSION@)
diff -Naur OpenShadingLanguage/src/cmake/externalpackages.cmake OpenShadingLanguage_BLD/src/cmake/externalpackages.cmake
--- OpenShadingLanguage/src/cmake/externalpackages.cmake	2023-09-20 21:22:54.889148481 -0400
+++ OpenShadingLanguage_BLD/src/cmake/externalpackages.cmake	2023-09-25 21:05:14.829265011 -0400
@@ -49,11 +49,6 @@
     # Boost_VERSION, Boost_INCLUDE_DIRS, Boost_LIBRARY_DIRS, Boost_LIBRARIES.
 else ()
     set (Boost_COMPONENTS filesystem system thread)
-    # The FindBoost.cmake interface is broken if it uses boost's installed
-    # cmake output (e.g. boost 1.70.0, cmake <= 3.14). Specifically it fails
-    # to set the expected variables printed below. So until that's fixed
-    # force FindBoost.cmake to use the original brute force path.
-    set (Boost_NO_BOOST_CMAKE ON)
     checked_find_package (Boost REQUIRED
                        VERSION_MIN 1.55
                        COMPONENTS ${Boost_COMPONENTS}
diff -Naur OpenShadingLanguage/src/cmake/flexbison.cmake OpenShadingLanguage_BLD/src/cmake/flexbison.cmake
--- OpenShadingLanguage/src/cmake/flexbison.cmake	2023-09-20 21:22:54.889148481 -0400
+++ OpenShadingLanguage_BLD/src/cmake/flexbison.cmake	2023-09-25 21:05:14.829265011 -0400
@@ -27,6 +27,11 @@
                  DOC "path to the bison executable")
 endif()
 
+if (MSVC)
+    find_program(BISON_EXECUTABLE NAMES win_bison HINTS ${BISON_ROOT} DOC "path to the bison executable")
+    find_program(FLEX_EXECUTABLE NAMES win_flex HINTS ${BISON_ROOT} DOC "path to the flex executable")
+endif (MSVC)
+
 checked_find_package (BISON 2.7 REQUIRED
                       PRINT BISON_EXECUTABLE)
 checked_find_package (FLEX 2.3.35 REQUIRED
diff -Naur OpenShadingLanguage/src/liboslcomp/ast.cpp OpenShadingLanguage_BLD/src/liboslcomp/ast.cpp
--- OpenShadingLanguage/src/liboslcomp/ast.cpp	2023-09-20 21:22:54.897148354 -0400
+++ OpenShadingLanguage_BLD/src/liboslcomp/ast.cpp	2023-09-25 21:05:14.829265011 -0400
@@ -46,7 +46,7 @@
     for (int i = 0; i < ASTNode::_last_node; ++i)
         if (node_counts[i] > 0)
             Strutil::print("ASTNode type {:2}: {:5}   (peak {:5})\n", i,
-                           node_counts[i], node_counts_peak[i]);
+                           (int)node_counts[i], (int)node_counts_peak[i]);
 });
 }  // namespace
 #endif
