diff -Naur OpenShadingLanguage/CMakeLists.txt OSL_BLD/CMakeLists.txt
--- OpenShadingLanguage/CMakeLists.txt	2024-06-26 16:05:10.530665518 -0400
+++ OSL_BLD/CMakeLists.txt	2024-06-26 16:00:29.386207307 -0400
@@ -15,6 +15,11 @@
 project (OSL VERSION ${OSL_VERSION}
          LANGUAGES CXX C
          HOMEPAGE_URL "https://github.com/AcademySoftwareFoundation/OpenShadingLanguage")
+
+set(CMAKE_CXX_EXTENSIONS OFF)
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+
 set (PROJ_NAME ${PROJECT_NAME})    # short name
 string (TOLOWER ${PROJ_NAME} PROJ_NAME_LOWER)  # short name lower case
 string (TOUPPER ${PROJ_NAME} PROJ_NAME_UPPER)  # short name upper case
diff -Naur OpenShadingLanguage/src/cmake/Config.cmake.in OSL_BLD/src/cmake/Config.cmake.in
--- OpenShadingLanguage/src/cmake/Config.cmake.in	2024-06-26 16:05:10.532665479 -0400
+++ OSL_BLD/src/cmake/Config.cmake.in	2024-06-26 16:00:29.386207307 -0400
@@ -8,7 +8,7 @@
 
 # add here all the find_dependency() whenever switching to config based dependencies
 if (@OpenEXR_VERSION@ VERSION_GREATER_EQUAL 3.0)
-    find_dependency(Imath @Imath_VERSION@)
+	 find_dependency(OpenEXR @OpenEXR_VERSION@)
 elseif (@OpenEXR_VERSION@ VERSION_GREATER_EQUAL 2.4 AND @FOUND_OPENEXR_WITH_CONFIG@)
     find_dependency(IlmBase @OpenEXR_VERSION@)
     find_dependency(OpenEXR @OpenEXR_VERSION@)
diff -Naur OpenShadingLanguage/src/cmake/externalpackages.cmake OSL_BLD/src/cmake/externalpackages.cmake
--- OpenShadingLanguage/src/cmake/externalpackages.cmake	2024-06-26 16:05:10.532665479 -0400
+++ OSL_BLD/src/cmake/externalpackages.cmake	2024-06-26 16:00:29.387207292 -0400
@@ -49,13 +49,6 @@
     # Boost_VERSION, Boost_INCLUDE_DIRS, Boost_LIBRARY_DIRS, Boost_LIBRARIES.
 else ()
     set (Boost_COMPONENTS filesystem system thread)
-    # The FindBoost.cmake interface is broken if it uses boost's installed
-    # cmake output (e.g. boost 1.70.0, cmake <= 3.14). Specifically it fails
-    # to set the expected variables printed below. So until that's fixed
-    # force FindBoost.cmake to use the original brute force path.
-    if (NOT DEFINED Boost_NO_BOOST_CMAKE)
-        set (Boost_NO_BOOST_CMAKE ON)
-    endif ()
     checked_find_package (Boost REQUIRED
                        VERSION_MIN 1.55
                        COMPONENTS ${Boost_COMPONENTS}
diff -Naur OpenShadingLanguage/src/cmake/flexbison.cmake OSL_BLD/src/cmake/flexbison.cmake
--- OpenShadingLanguage/src/cmake/flexbison.cmake	2024-06-26 16:05:10.532665479 -0400
+++ OSL_BLD/src/cmake/flexbison.cmake	2024-06-26 16:00:29.387207292 -0400
@@ -27,6 +27,11 @@
                  DOC "path to the bison executable")
 endif()
 
+if (MSVC)
+    find_program(BISON_EXECUTABLE NAMES win_bison HINTS ${BISON_ROOT} DOC "path to the bison executable")
+    find_program(FLEX_EXECUTABLE NAMES win_flex HINTS ${BISON_ROOT} DOC "path to the flex executable")
+endif (MSVC)
+
 checked_find_package (BISON 2.7 REQUIRED
                       PRINT BISON_EXECUTABLE)
 checked_find_package (FLEX 2.3.35 REQUIRED
diff -Naur OpenShadingLanguage/src/cmake/modules/FindLLVM.cmake OSL_BLD/src/cmake/modules/FindLLVM.cmake
--- OpenShadingLanguage/src/cmake/modules/FindLLVM.cmake	2024-06-26 16:05:10.532665479 -0400
+++ OSL_BLD/src/cmake/modules/FindLLVM.cmake	2024-06-26 16:22:10.337491211 -0400
@@ -128,7 +128,7 @@
 foreach (COMPONENT clangFrontend clangDriver clangSerialization
                    clangParse clangSema clangAnalysis clangAST
                    clangASTMatchers clangBasic clangEdit clangLex
-                   clangSupport)
+                   clangSupport clangAPINotes)
     find_library ( _CLANG_${COMPONENT}_LIBRARY
                   NAMES ${COMPONENT}
                   PATHS ${LLVM_LIB_DIR})
@@ -156,6 +156,7 @@
   endif ()
 endif ()
 
+set(LLVM_LIBRARIES ${LLVM_LIBRARIES} ${CLANG_LIBRARIES})
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args (LLVM
diff -Naur OpenShadingLanguage/src/cmake/modules/FindZLIB.cmake OSL_BLD/src/cmake/modules/FindZLIB.cmake
--- OpenShadingLanguage/src/cmake/modules/FindZLIB.cmake	1969-12-31 19:00:00.000000000 -0500
+++ OSL_BLD/src/cmake/modules/FindZLIB.cmake	2024-06-26 16:00:29.387207292 -0400
@@ -0,0 +1,123 @@
+#.rst:
+# FindZLIB
+# --------
+#
+# Find the native ZLIB includes and library.
+#
+# IMPORTED Targets
+# ^^^^^^^^^^^^^^^^
+#
+# This module defines :prop_tgt:`IMPORTED` target ``ZLIB::ZLIB``, if
+# ZLIB has been found.
+#
+# Result Variables
+# ^^^^^^^^^^^^^^^^
+#
+# This module defines the following variables:
+#
+# ::
+#
+#   ZLIB_INCLUDE_DIRS   - where to find zlib.h, etc.
+#   ZLIB_LIBRARIES      - List of libraries when using zlib.
+#   ZLIB_FOUND          - True if zlib found.
+#
+# ::
+#
+#   ZLIB_VERSION_STRING - The version of zlib found (x.y.z)
+#   ZLIB_VERSION_MAJOR  - The major version of zlib
+#   ZLIB_VERSION_MINOR  - The minor version of zlib
+#   ZLIB_VERSION_PATCH  - The patch version of zlib
+#   ZLIB_VERSION_TWEAK  - The tweak version of zlib
+#
+# Backward Compatibility
+# ^^^^^^^^^^^^^^^^^^^^^^
+#
+# The following variable are provided for backward compatibility
+#
+# ::
+#
+#   ZLIB_MAJOR_VERSION  - The major version of zlib
+#   ZLIB_MINOR_VERSION  - The minor version of zlib
+#   ZLIB_PATCH_VERSION  - The patch version of zlib
+#
+# Hints
+# ^^^^^
+#
+# A user may set ``ZLIB_ROOT`` to a zlib installation root to tell this
+# module where to look.
+
+#=============================================================================
+# Copyright 2001-2011 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+set(_ZLIB_SEARCHES)
+
+# Search ZLIB_ROOT first if it is set.
+if(ZLIB_ROOT)
+  set(_ZLIB_SEARCH_ROOT PATHS ${ZLIB_ROOT} NO_DEFAULT_PATH)
+  list(APPEND _ZLIB_SEARCHES _ZLIB_SEARCH_ROOT)
+endif()
+
+# Normal search.
+set(_ZLIB_SEARCH_NORMAL
+  PATHS "[HKEY_LOCAL_MACHINE\\SOFTWARE\\GnuWin32\\Zlib;InstallPath]"
+        "$ENV{PROGRAMFILES}/zlib"
+  )
+list(APPEND _ZLIB_SEARCHES _ZLIB_SEARCH_NORMAL)
+
+set(ZLIB_NAMES z_brl z zlib zdll zlib1 zlibd zlibd1)
+
+# Try each search configuration.
+foreach(search ${_ZLIB_SEARCHES})
+  find_path(ZLIB_INCLUDE_DIR NAMES zlib.h        ${${search}} PATH_SUFFIXES include)
+  find_library(ZLIB_LIBRARY  NAMES ${ZLIB_NAMES} ${${search}} PATH_SUFFIXES lib)
+endforeach()
+
+mark_as_advanced(ZLIB_LIBRARY ZLIB_INCLUDE_DIR)
+
+if(ZLIB_INCLUDE_DIR AND EXISTS "${ZLIB_INCLUDE_DIR}/zlib.h")
+    file(STRINGS "${ZLIB_INCLUDE_DIR}/zlib.h" ZLIB_H REGEX "^#define ZLIB_VERSION \"[^\"]*\"$")
+
+    string(REGEX REPLACE "^.*ZLIB_VERSION \"([0-9]+).*$" "\\1" ZLIB_VERSION_MAJOR "${ZLIB_H}")
+    string(REGEX REPLACE "^.*ZLIB_VERSION \"[0-9]+\\.([0-9]+).*$" "\\1" ZLIB_VERSION_MINOR  "${ZLIB_H}")
+    string(REGEX REPLACE "^.*ZLIB_VERSION \"[0-9]+\\.[0-9]+\\.([0-9]+).*$" "\\1" ZLIB_VERSION_PATCH "${ZLIB_H}")
+    set(ZLIB_VERSION_STRING "${ZLIB_VERSION_MAJOR}.${ZLIB_VERSION_MINOR}.${ZLIB_VERSION_PATCH}")
+
+    # only append a TWEAK version if it exists:
+    set(ZLIB_VERSION_TWEAK "")
+    if( "${ZLIB_H}" MATCHES "ZLIB_VERSION \"[0-9]+\\.[0-9]+\\.[0-9]+\\.([0-9]+)")
+        set(ZLIB_VERSION_TWEAK "${CMAKE_MATCH_1}")
+        set(ZLIB_VERSION_STRING "${ZLIB_VERSION_STRING}.${ZLIB_VERSION_TWEAK}")
+    endif()
+
+    set(ZLIB_MAJOR_VERSION "${ZLIB_VERSION_MAJOR}")
+    set(ZLIB_MINOR_VERSION "${ZLIB_VERSION_MINOR}")
+    set(ZLIB_PATCH_VERSION "${ZLIB_VERSION_PATCH}")
+endif()
+
+# handle the QUIETLY and REQUIRED arguments and set ZLIB_FOUND to TRUE if
+# all listed variables are TRUE
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(ZLIB REQUIRED_VARS ZLIB_LIBRARY ZLIB_INCLUDE_DIR
+                                       VERSION_VAR ZLIB_VERSION_STRING)
+
+if(ZLIB_FOUND)
+    set(ZLIB_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR})
+    set(ZLIB_LIBRARIES ${ZLIB_LIBRARY})
+
+    if(NOT TARGET ZLIB::ZLIB)
+      add_library(ZLIB::ZLIB UNKNOWN IMPORTED)
+      set_target_properties(ZLIB::ZLIB PROPERTIES
+        IMPORTED_LOCATION "${ZLIB_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${ZLIB_INCLUDE_DIRS}")
+    endif()
+endif()
diff -Naur OpenShadingLanguage/src/liboslcomp/CMakeLists.txt OSL_BLD/src/liboslcomp/CMakeLists.txt
--- OpenShadingLanguage/src/liboslcomp/CMakeLists.txt	2024-06-26 16:05:10.536665401 -0400
+++ OSL_BLD/src/liboslcomp/CMakeLists.txt	2024-06-26 16:00:29.387207292 -0400
@@ -60,6 +60,7 @@
         SOVERSION   ${SOVERSION}
         OUTPUT_NAME ${local_lib}${OSL_LIBNAME_SUFFIX}
         LINK_FLAGS  ${link_flags}
+		  CXX_STANDARD 17
         POSITION_INDEPENDENT_CODE ON
     )
 
diff -Naur OpenShadingLanguage/src/liboslexec/CMakeLists.txt OSL_BLD/src/liboslexec/CMakeLists.txt
--- OpenShadingLanguage/src/liboslexec/CMakeLists.txt	2024-06-26 16:05:10.537665382 -0400
+++ OSL_BLD/src/liboslexec/CMakeLists.txt	2024-06-26 16:02:50.189463356 -0400
@@ -583,6 +583,7 @@
         ${Boost_LIBRARIES} ${CMAKE_DL_LIBS}
         ${CLANG_LIBRARIES}
         ${LLVM_LIBRARIES} ${LLVM_LDFLAGS} ${LLVM_SYSTEM_LIBRARIES}
+		  ${ZLIB_LIBRARIES}
     )
 
 target_compile_features (${local_lib}
@@ -599,6 +600,7 @@
         VERSION     ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}
         SOVERSION   ${SOVERSION}
         OUTPUT_NAME ${local_lib}${OSL_LIBNAME_SUFFIX}
+		  CXX_STANDARD 17
         LINK_FLAGS  ${link_flags}
     )
 
@@ -613,17 +615,17 @@
 # Unit tests
 if (OSL_BUILD_TESTS AND BUILD_TESTING)
     add_executable (accum_test accum_test.cpp)
-    target_link_libraries (accum_test PRIVATE oslexec ${Boost_LIBRARIES} ${CMAKE_DL_LIBS})
+	 target_link_libraries (accum_test PRIVATE oslexec ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${CMAKE_DL_LIBS})
     set_target_properties (accum_test PROPERTIES FOLDER "Unit Tests")
     add_test (unit_accum ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/accum_test)
 
     add_executable (dual_test dual_test.cpp)
-    target_link_libraries (dual_test PRIVATE OpenImageIO::OpenImageIO ${ILMBASE_LIBRARIES} ${Boost_LIBRARIES} ${CMAKE_DL_LIBS})
+    target_link_libraries (dual_test PRIVATE OpenImageIO::OpenImageIO ${ILMBASE_LIBRARIES} ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${CMAKE_DL_LIBS})
     set_target_properties (dual_test PROPERTIES FOLDER "Unit Tests")
     add_test (unit_dual ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/dual_test)
 
     add_executable (llvmutil_test llvmutil_test.cpp)
-    target_link_libraries (llvmutil_test PRIVATE oslexec ${Boost_LIBRARIES} ${CMAKE_DL_LIBS})
+    target_link_libraries (llvmutil_test PRIVATE oslexec ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${CMAKE_DL_LIBS})
     set_target_properties (llvmutil_test PROPERTIES FOLDER "Unit Tests")
     add_test (unit_llvmutil ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/llvmutil_test)
 endif ()
diff -Naur OpenShadingLanguage/src/liboslexec/llvm_util.cpp OSL_BLD/src/liboslexec/llvm_util.cpp
--- OpenShadingLanguage/src/liboslexec/llvm_util.cpp	2024-06-26 16:05:10.538665362 -0400
+++ OSL_BLD/src/liboslexec/llvm_util.cpp	2024-06-26 16:04:03.078993987 -0400
@@ -3266,12 +3266,6 @@
     }
 }
 
-bool
-LLVM_Util::is_type_array(llvm::Type* type)
-{
-    return type->isArrayTy();
-}
-
 llvm::Type*
 LLVM_Util::type_array(llvm::Type* type, int n)
 {
diff -Naur OpenShadingLanguage/src/oslc/CMakeLists.txt OSL_BLD/src/oslc/CMakeLists.txt
--- OpenShadingLanguage/src/oslc/CMakeLists.txt	2024-06-26 16:05:10.542665284 -0400
+++ OSL_BLD/src/oslc/CMakeLists.txt	2024-06-26 16:00:29.388207276 -0400
@@ -12,5 +12,5 @@
 endif ()
 
 add_executable ( oslc ${oslc_srcs} )
-target_link_libraries ( oslc PRIVATE oslcomp ${Boost_LIBRARIES} ${CMAKE_DL_LIBS})
+target_link_libraries ( oslc PRIVATE oslcomp ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${CMAKE_DL_LIBS})
 install_targets (oslc)
diff -Naur OpenShadingLanguage/src/testrender/CMakeLists.txt OSL_BLD/src/testrender/CMakeLists.txt
--- OpenShadingLanguage/src/testrender/CMakeLists.txt	2024-06-26 16:05:10.542665284 -0400
+++ OSL_BLD/src/testrender/CMakeLists.txt	2024-06-26 16:00:29.388207276 -0400
@@ -69,7 +69,10 @@
 target_link_libraries (testrender
     PRIVATE
         oslexec oslquery
-        pugixml::pugixml)
+        pugixml::pugixml
+		  LLVMSupport
+		  ${ZLIB_LIBRARIES}
+		  )
 
 osl_optix_target (testrender)
 
diff -Naur OpenShadingLanguage/src/testshade/CMakeLists.txt OSL_BLD/src/testshade/CMakeLists.txt
--- OpenShadingLanguage/src/testshade/CMakeLists.txt	2024-06-26 16:05:10.543665265 -0400
+++ OSL_BLD/src/testshade/CMakeLists.txt	2024-06-26 16:00:29.388207276 -0400
@@ -79,7 +79,7 @@
 
 target_link_libraries (testshade
                        PRIVATE
-                           oslexec oslquery)
+                           oslexec oslquery LLVMSupport ${ZLIB_LIBRARIES})
 
 install (TARGETS testshade RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )
 
@@ -106,7 +106,7 @@
 
     target_link_libraries (libtestshade
                            PRIVATE
-                               oslexec oslquery)
+									oslexec oslquery LLVMSupport ${ZLIB_LIBRARIES})
     set_target_properties (libtestshade PROPERTIES PREFIX "")
 
     install_targets ( libtestshade )
@@ -116,7 +116,7 @@
     target_link_libraries (testshade_dso
                            PRIVATE
                                OpenImageIO::OpenImageIO
-                               ${Boost_LIBRARIES} ${CMAKE_DL_LIBS} )
+                               ${Boost_LIBRARIES} ${ZLIB_LIBRARIES} ${CMAKE_DL_LIBS} )
     install (TARGETS testshade_dso RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )
     osl_optix_target(libtestshade)
 endif ()
