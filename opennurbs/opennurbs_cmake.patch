--- opennurbs/CMakeLists.txt	2024-07-13 00:43:41.388860103 -0400
+++ OPENNURBS_BLD/CMakeLists.txt	2024-07-13 00:44:17.319201520 -0400
@@ -2,15 +2,54 @@
 #set(CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD)")
 project(opennurbs CXX)
 
+# Where to look for CMake modules
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake")
+
 # specify the C++ standard
+set(CMAKE_CXX_EXTENSIONS OFF)
 set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_STANDARD_REQUIRED True)
 
+# Generate position independent code by default (i.e. -fPIC)
+set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
+
+# Define destinations if not already set
+if(NOT DEFINED BIN_DIR)
+  set(BIN_DIR bin)
+endif(NOT DEFINED BIN_DIR)
+if(NOT DEFINED LIB_DIR)
+  set(LIB_DIR lib)
+endif(NOT DEFINED LIB_DIR)
+
+include(CheckFunctionExists)
+check_function_exists(uuid_generate HAVE_UUID_GENERATE)
+
 if (UNIX AND NOT APPLE)
     set(LINUX TRUE)
 endif()
 
+# these are files no longer in upstream openNURBS but retained for reference
+set(OPENNURBS_REF
+  #opennurbs_basic.cpp
+  #opennurbs_brep_changesrf.cpp
+  #opennurbs_brep_kinky.cpp
+  opennurbs_x.cpp
+  )
+
+set(OPENNURBS_REF_HDRS
+  opennurbs_x.h
+  )
+
+# these are files we turn off because we don't use them and they incur some
+# cost to enable (e.g., they require OpenGL)
+set(OPENNURBS_OFF
+  opennurbs_gl.cpp
+  opennurbs_gl.h
+  opennurbs_zlib_memory.cpp
+  )
+
 set( OPENNURBS_PUBLIC_HEADERS
+    ${OPENNURBS_REF_HDRS}
     opennurbs.h
     opennurbs_3dm.h
     opennurbs_3dm_attributes.h
@@ -38,6 +77,7 @@
     opennurbs_compstat.h
     opennurbs_cone.h
     opennurbs_convex_poly.h
+	 opennurbs_cpp_base.h
     opennurbs_crc.h
     opennurbs_curve.h
     opennurbs_curveonsurface.h
@@ -175,6 +215,7 @@
     opennurbs_version.h
     opennurbs_version_number.h
     opennurbs_viewport.h
+	 opennurbs_windows_targetver.h
     opennurbs_wip.h
     opennurbs_workspace.h
     opennurbs_xform.h
@@ -183,6 +224,7 @@
     )
 
 set( OPENNURBS_PUBLIC_SOURCES
+    ${OPENNURBS_REF}
     opennurbs_3dm_attributes.cpp
     opennurbs_3dm_properties.cpp
     opennurbs_3dm_settings.cpp
@@ -378,6 +419,29 @@
     opennurbs_zlib_memory.cpp
     )
 
+if (NOT HAVE_UUID_GENERATE AND NOT MSVC)
+  set(OPENNURBS_PUBLIC_SOURCES ${OPENNURBS_PUBLIC_SOURCES}
+    android_uuid/clear.c
+    android_uuid/compare.c
+    android_uuid/copy.c
+    android_uuid/isnull.c
+    android_uuid/pack.c
+    android_uuid/parse.c
+    android_uuid/unpack.c
+    android_uuid/unparse.c
+    )
+  if (WIN32)
+    set(OPENNURBS_PUBLIC_SOURCES ${OPENNURBS_PUBLIC_SOURCES}
+      android_uuid/gen_uuid_nt.c
+      )
+  else ()
+    set(OPENNURBS_PUBLIC_SOURCES ${OPENNURBS_PUBLIC_SOURCES}
+      android_uuid/gen_uuid.c
+      android_uuid/uuid_time.c
+      )
+  endif (WIN32)
+endif (NOT HAVE_UUID_GENERATE AND NOT MSVC)
+
 if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/opennurbs_plus.h)
 set( OPENNURBS_PLUS_HEADERS
     opennurbsRhino.pch
@@ -406,6 +471,10 @@
     opennurbs_plus_x.h
     )
 
+if (NOT HAVE_UUID_GENERATE AND NOT MSVC)
+  install(FILES android_uuid/uuid.h DESTINATION include/OpenNURBS/android_uuid)
+endif (NOT HAVE_UUID_GENERATE AND NOT MSVC)
+
 if (BUILD_TESTING)
     LIST(APPEND OPENNURBS_PLUS_HEADERS opennurbs_plus_testheader.h)
 endif(BUILD_TESTING)
@@ -469,12 +538,57 @@
    )
 endif() #OpenNURBS plus source files
 
-if (ANDROID OR LINUX)
-  add_subdirectory(android_uuid)
-  add_subdirectory(freetype263)
+include(CheckIncludeFiles)
+check_include_files(emmintrin.h HAVE_EMMINTRIN_H)
+check_include_files(ieeefp.h HAVE_IEEEFP_H)
+check_include_files(sys/stat.h HAVE_SYS_STAT_H)
+if(HAVE_EMMINTRIN_H)
+  add_definitions(-DHAVE_EMMINTRIN_H)
+endif(HAVE_EMMINTRIN_H)
+if(HAVE_IEEEFP_H)
+  add_definitions(-DHAVE_IEEEFP_H)
+endif(HAVE_IEEEFP_H)
+if(HAVE_SYS_STAT_H)
+  add_definitions(-DHAVE_SYS_STAT_H)
+endif(HAVE_SYS_STAT_H)
+
+find_package(ZLIB REQUIRED)
+set(OPENNURBS_LINKLIBRARIES ZLIB::ZLIB)
+
+if("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
+  include(CheckCXXCompilerFlag)
+  check_cxx_compiler_flag(-O3 HAVE_O3)
+  if(HAVE_O3)
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
+  endif(HAVE_O3)
+endif("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
+
+if (MSVC)
+  # opennurbs_brep.cpp requires this flag when compiling with Visual C++
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
+  #add_compile_options(\bigobj)
+  add_definitions(-DUNICODE)
+  add_definitions(-D_UNICODE)
+  set(OPENNURBS_LINKLIBRARIES ${OPENNURBS_LINKLIBRARIES} Rpcrt4 Shlwapi Usp10)
 endif()
 
-add_subdirectory(zlib)
+add_definitions(-DON_CMAKE_BUILD)
+
+if (MSVC)
+    # warning level 4 and all warnings as errors
+    add_compile_options(/W4)
+else()
+    # These need to be addressed
+    add_compile_options(-Wno-inconsistent-missing-override)
+    add_compile_options(-Wno-defaulted-function-deleted)
+    add_compile_options(-Wno-switch)
+    add_compile_options(-Wno-tautological-pointer-compare)
+    add_compile_options(-Wno-deprecated-declarations)
+    add_compile_options(-Wno-unsequenced)
+    add_compile_options(-Wno-parentheses)
+    add_compile_options(-Wno-writable-strings)
+    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-switch")
+endif()
 
 ## opennurbs static library
 add_library( opennurbsStatic STATIC
@@ -495,34 +609,7 @@
     opennurbs_dll.cpp
     )
 
-if (MSVC)
-  # opennurbs_brep.cpp requires this flag when compiling with Visual C++
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
-  #add_compile_options(\bigobj)
-  add_definitions(-DUNICODE)
-  add_definitions(-D_UNICODE)
-endif()
-
-add_definitions(-DON_CMAKE_BUILD)
-
-if (ANDROID)
-  include_directories("freetype263/include")
-endif()
-
 if( APPLE)
-   find_library( CORE_GRAPHICS_LIBRARY CoreGraphics)
-   message( STATUS "CORE_GRAPHICS_LIBRARY is ${CORE_GRAPHICS_LIBRARY}")
-   find_library( CORE_TEXT_LIBRARY CoreText)
-   message( STATUS "CORE_TEXT_LIBRARY is ${CORE_TEXT_LIBRARY}")
-   find_library( FOUNDATION_LIBRARY Foundation)
-   message( STATUS "FOUNDATION_LIBRARY is ${FOUNDATION_LIBRARY}")
-
-   set( OPENNURBS_APPLE_DEPENDENCIES
-           ${CORE_GRAPHICS_LIBRARY}
-           ${CORE_TEXT_LIBRARY}
-           ${FOUNDATION_LIBRARY}
-           )
-
     set( OPENNURBS_APPLE_DEFINES
         ON_COMPILER_CLANG
         ON_RUNTIME_APPLE
@@ -531,98 +618,33 @@
     )
     target_compile_definitions(opennurbsStatic PRIVATE ${OPENNURBS_APPLE_DEFINES})
     target_compile_definitions(OpenNURBS PRIVATE ${OPENNURBS_APPLE_DEFINES})
-
-    # xcode properties are the same for both static and shared libs
-    set_target_properties( opennurbsStatic OpenNURBS
-        PROPERTIES
-        XCODE_ATTRIBUTE_SDKROOT "macosx"
-        XCODE_ATTRIBUTE_SUPPORTED_PLATFORMS "macosx iphonesimulator iphoneos"
-        XCODE_ATTRIBUTE_SYMROOT "build"
-        XCODE_ATTRIBUTE_ALLOW_TARGET_PLATFORM_SPECIALIZATION "YES"
-        XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT "dwarf"
-        XCODE_ATTRIBUTE_MACOSX_DEPLOYMENT_TARGET "11.3"
-        XCODE_ATTRIBUTE_DYLIB_COMPATIBILITY_VERSION "1"
-        XCODE_ATTRIBUTE_DYLIB_CURRENT_VERSION "1"
-        XCODE_ATTRIBUTE_INFOPLIST_FILE "opennurbsRhinoInfo.plist"
-        XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER "com.mcneel.opennurbs"
-        XCODE_ATTRIBUTE_HEADER_SEARCH_PATHS "$(PROJECT_DIR)/freetype263/include"
-        XCODE_ATTRIBUTE_CURRENT_PROJECT_VERSION "1"
-        XCODE_ATTRIBUTE_MARKETING_VERSION "8 Internal"
-        XCODE_ATTRIBUTE_GCC_INLINES_ARE_PRIVATE_EXTERN "YES"
-        XCODE_ATTRIBUTE_GCC_NO_COMMON_BLOCKS "YES"
-        XCODE_ATTRIBUTE_GCC_INPUT_FILETYPE "sourcecode.cpp.objcpp"
-        XCODE_ATTRIBUTE_GCC_PRECOMPILE_PREFIX_HEADER "YES"
-        XCODE_ATTRIBUTE_GCC_PREFIX_HEADER "$(PROJECT_DIR)/opennurbsRhino.pch"
-        XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC "YES"
-        XCODE_ATTRIBUTE_ENABLE_STRICT_OBJC_MSGSEND "YES"
-    )
 endif()
 
 
-if (MSVC)
-    # warning level 4 and all warnings as errors
-    add_compile_options(/W4)
-else()
-    # These need to be addressed
-    add_compile_options(-Wno-inconsistent-missing-override)
-    add_compile_options(-Wno-defaulted-function-deleted)
-    add_compile_options(-Wno-switch)
-    add_compile_options(-Wno-tautological-pointer-compare)
-    add_compile_options(-Wno-deprecated-declarations)
-    add_compile_options(-Wno-unsequenced)
-    add_compile_options(-Wno-parentheses)
-    add_compile_options(-Wno-writable-strings)
-    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-switch")
-endif()
+target_compile_definitions(opennurbsStatic PRIVATE ON_COMPILING_OPENNURBS)
+target_compile_definitions(OpenNURBS PRIVATE OPENNURBS_EXPORTS ON_COMPILING_OPENNURBS)
 
-
-target_compile_definitions(opennurbsStatic PRIVATE ON_COMPILING_OPENNURBS Z_PREFIX MY_ZCALLOC)
-target_compile_definitions(OpenNURBS PRIVATE OPENNURBS_EXPORTS Z_PREFIX MY_ZCALLOC)
-
-target_include_directories(opennurbsStatic PUBLIC .)
-target_include_directories(OpenNURBS PUBLIC .)
+target_include_directories(opennurbsStatic PUBLIC . ${ZLIB_INCLUDE_DIRS})
+target_include_directories(OpenNURBS PUBLIC . ${ZLIB_INCLUDE_DIRS})
 
 set(PRECOMPILED_HEADERS opennurbs.h)
-if (BUILD_TESTING)
-    LIST(APPEND PRECOMPILED_HEADERS opennurbs_plus_testheader.h)
-endif(BUILD_TESTING)
-
 target_precompile_headers(opennurbsStatic PRIVATE ${PRECOMPILED_HEADERS})
 target_precompile_headers(OpenNURBS PRIVATE ${PRECOMPILED_HEADERS})
 
-install( TARGETS opennurbsStatic DESTINATION "lib")
-install( FILES ${OPENNURBS_PUBLIC_HEADERS} DESTINATION "include/opennurbsStatic")
-
-
-if (ANDROID)
-target_link_libraries( OpenNURBS zlib opennurbs_public_freetype android_uuid android)
-target_link_libraries( opennurbsStatic zlib opennurbs_public_freetype android_uuid android)
-endif()
-if (LINUX AND NOT ANDROID)
-target_link_libraries( OpenNURBS zlib opennurbs_public_freetype android_uuid)
-target_link_libraries( opennurbsStatic zlib opennurbs_public_freetype android_uuid)
-endif()
-if (APPLE)
-target_link_libraries( OpenNURBS ${OPENNURBS_APPLE_DEPENDENCIES} zlib)
-target_link_libraries( opennurbsStatic ${OPENNURBS_APPLE_DEPENDENCIES} zlib)
-endif()
-if (WIN32)
-target_link_libraries( OpenNURBS Shlwapi Usp10 zlib)
-target_link_libraries( opennurbsStatic Shlwapi Usp10 zlib)
+if (OPENNURBS_LINKLIBRARIES)
+  target_link_libraries( OpenNURBS ${OPENNURBS_LINKLIBRARIES})
 endif()
 
-if (APPLE)
-   set_target_properties( OpenNURBS PROPERTIES
-FRAMEWORK TRUE
-FRAMEWORK_VERSION A
-# MACOSX_FRAMEWORK_IDENTIFIER "com.mcneel.OpenNURBS"
-# VERSION "8.0.0"
-# SOVERSION  "8.0.0"
-PUBLIC_HEADER "${OPENNURBS_PUBLIC_HEADERS}"
-)
+install(TARGETS OpenNURBS
+    RUNTIME DESTINATION ${BIN_DIR}
+    LIBRARY DESTINATION ${LIB_DIR}
+    ARCHIVE DESTINATION ${LIB_DIR})
+
+install(TARGETS opennurbsStatic
+    RUNTIME DESTINATION ${BIN_DIR}
+    LIBRARY DESTINATION ${LIB_DIR}
+    ARCHIVE DESTINATION ${LIB_DIR})
+
+install( FILES ${OPENNURBS_PUBLIC_HEADERS} DESTINATION "include/OpenNURBS")
+install( FILES android_uuid/uuid.h DESTINATION "include/OpenNURBS/android_uuid")
 
-   install( TARGETS OpenNURBS DESTINATION "Frameworks")
-else()
-   install( TARGETS OpenNURBS DESTINATION "lib" )
-   install( FILES ${OPENNURBS_PUBLIC_HEADERS} DESTINATION "include/OpenNURBS")
-endif()
