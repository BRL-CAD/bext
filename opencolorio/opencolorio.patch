diff -Naur OpenColorIO/CMakeLists.txt OpenColorIO_BLD/CMakeLists.txt
--- OpenColorIO/CMakeLists.txt	2023-09-20 21:19:44.040141941 -0400
+++ OpenColorIO_BLD/CMakeLists.txt	2023-09-25 10:34:31.647394363 -0400
@@ -433,7 +433,7 @@
    application or shared library that uses static OpenColorIO.
 
    The following mandatory dependencies MUST be linked to the consumer application or shared library:
-   expat, yaml-cpp, Imath, pystring, minizip-ng and ZLIB")
+   expat, yaml-cpp, Imath, pystring, minizip and ZLIB")
 endif()
 
 
@@ -520,8 +520,6 @@
         ${CMAKE_CURRENT_LIST_DIR}/share/cmake/modules/Findexpat.cmake
         ${CMAKE_CURRENT_LIST_DIR}/share/cmake/modules/FindImath.cmake
         ${CMAKE_CURRENT_LIST_DIR}/share/cmake/modules/Findpystring.cmake
-        ${CMAKE_CURRENT_LIST_DIR}/share/cmake/modules/Findminizip-ng.cmake
-        ${CMAKE_CURRENT_LIST_DIR}/share/cmake/modules/Findyaml-cpp.cmake
         DESTINATION ${OCIO_CUSTOM_FIND_MODULE_DIR}
     )
 endif()
diff -Naur OpenColorIO/share/cmake/modules/FindExtPackages.cmake OpenColorIO_BLD/share/cmake/modules/FindExtPackages.cmake
--- OpenColorIO/share/cmake/modules/FindExtPackages.cmake	2023-09-20 21:19:44.072141445 -0400
+++ OpenColorIO_BLD/share/cmake/modules/FindExtPackages.cmake	2023-09-25 10:54:11.966557593 -0400
@@ -110,10 +110,11 @@
 
 # minizip-ng
 # https://github.com/zlib-ng/minizip-ng
-ocio_handle_dependency(  minizip-ng REQUIRED ALLOW_INSTALL
-                         MIN_VERSION 3.0.6
-                         RECOMMENDED_VERSION 3.0.7
-                         RECOMMENDED_VERSION_REASON "Latest version tested with OCIO")
+find_package(minizip REQUIRED)
+#ocio_handle_dependency(  minizip REQUIRED ALLOW_INSTALL
+#                         MIN_VERSION 3.0.6
+#                         RECOMMENDED_VERSION 3.0.7
+#                         RECOMMENDED_VERSION_REASON "Latest version tested with OCIO")
 
 ###############################################################################
 ##
diff -Naur OpenColorIO/share/cmake/modules/Findminizip-ng.cmake OpenColorIO_BLD/share/cmake/modules/Findminizip-ng.cmake
--- OpenColorIO/share/cmake/modules/Findminizip-ng.cmake	2023-09-20 21:19:44.072141445 -0400
+++ OpenColorIO_BLD/share/cmake/modules/Findminizip-ng.cmake	1969-12-31 19:00:00.000000000 -0500
@@ -1,205 +0,0 @@
-# SPDX-License-Identifier: BSD-3-Clause
-# Copyright Contributors to the OpenColorIO Project.
-#
-# Locate minizip-ng
-#
-# Variables defined by this module:
-#   minizip-ng_FOUND        - If FALSE, do not try to link to minizip-ng
-#   minizip-ng_LIBRARY      - minizip-ng library to link to
-#   minizip-ng_INCLUDE_DIR  - Where to find mz.h and other headers
-#   minizip-ng_VERSION      - The version of the library
-#
-# Global targets defined by this module:
-#   MINIZIP::minizip-ng - IMPORTED target, if found
-#
-# Usually CMake will use the dynamic library rather than static, if both are present. 
-# In this case, you may set minizip-ng_STATIC_LIBRARY to ON to request use of the static one. 
-# If only the static library is present (such as when OCIO builds the dependency), then the option 
-# is not needed.
-#
-# If the library is not installed in a typical location where CMake will find it, you may specify 
-# the location using one of the following methods:
-# -- Set -Dminizip-ng_DIR to point to the directory containing the CMake configuration file for the package.
-# -- Set -Dminizip-ng_ROOT to point to the directory containing the lib and include directories.
-# -- Set -Dminizip-ng_LIBRARY and -Dminizip-ng_INCLUDE_DIR to point to the lib and include directories.
-#
-#
-# For external builds of minizip-ng, please note that the same build options should be used.
-# Using more options, such as enabling other compression methods, will provoke linking issue
-# since OCIO is not linking to those libraries.
-#
-# e.g. Setting MZ_BZIP2=ON will cause linking issue since OCIO will not be linked against BZIP2.
-#
-
-###############################################################################
-### Try to find package ###
-
-# BUILD_TYPE_DEBUG variable is currently set in one of the OCIO's CMake files. 
-# Now that some OCIO's find module are installed with the library itself (with static build), 
-# a consumer app don't have access to the variables set by an OCIO's CMake files. Therefore, some 
-# OCIO's find modules must detect the build type by itselves. 
-set(BUILD_TYPE_DEBUG OFF)
-if(CMAKE_BUILD_TYPE MATCHES "[Dd][Ee][Bb][Uu][Gg]")
-   set(BUILD_TYPE_DEBUG ON)
-endif()
-
-if(NOT OCIO_INSTALL_EXT_PACKAGES STREQUAL ALL)
-    if(NOT DEFINED minizip-ng_ROOT)
-        # Search for minizip-ng-config.cmake
-        find_package(minizip-ng ${minizip-ng_FIND_VERSION} CONFIG QUIET)
-    endif()
-    
-    if (minizip-ng_FOUND)
-        get_target_property(minizip-ng_INCLUDE_DIR MINIZIP::minizip-ng INTERFACE_INCLUDE_DIRECTORIES)
-        get_target_property(minizip-ng_LIBRARY MINIZIP::minizip-ng LOCATION)
-        
-        # Depending on the options used when minizip-ng was built, it could have multiple libraries
-        # listed in INTERFACE_LINK_LIBRARIES. OCIO only needs ZLIB.
-        # Only add custom zlib target ZLIB::ZLIB to INTERFACE_LINK_LIBRARIES.
-        set_target_properties(MINIZIP::minizip-ng PROPERTIES INTERFACE_LINK_LIBRARIES "ZLIB::ZLIB")
-
-        if (NOT minizip-ng_LIBRARY)
-            # Lib names to search for
-            set(_minizip-ng_LIB_NAMES minizip-ng)
-
-            if(BUILD_TYPE_DEBUG)
-                # Prefer Debug lib names (Windows only)
-                list(INSERT _minizip-ng_LIB_NAMES 0 minizip-ngd)
-            endif()
-
-            if(minizip-ng_STATIC_LIBRARY)
-                # Prefer static lib names
-                set(_minizip-ng_STATIC_LIB_NAMES 
-                    "${CMAKE_STATIC_LIBRARY_PREFIX}minizip-ng${CMAKE_STATIC_LIBRARY_SUFFIX}")
-                if(WIN32 AND BUILD_TYPE_DEBUG)
-                    # Prefer static Debug lib names (Windows only)
-                    list(INSERT _minizip-ng_STATIC_LIB_NAMES 0
-                        "${CMAKE_STATIC_LIBRARY_PREFIX}minizip-ngd${CMAKE_STATIC_LIBRARY_SUFFIX}")
-                endif()
-            endif()
-
-            # Find library
-            find_library(minizip-ng_LIBRARY
-                NAMES
-                    ${_minizip-ng_STATIC_LIB_NAMES}
-                    ${_minizip-ng_LIB_NAMES}
-                HINTS
-                    ${minizip-ng_ROOT}
-                    ${PC_minizip-ng_LIBRARY_DIRS}
-                PATH_SUFFIXES
-                    lib64 lib 
-            )
-
-            # Set IMPORTED_LOCATION property for MINIZIP::minizip-ng target.
-            if (TARGET MINIZIP::minizip-ng)
-                set_target_properties(MINIZIP::minizip-ng PROPERTIES
-                    IMPORTED_LOCATION "${minizip-ng_LIBRARY}"
-                )
-            endif()
-        endif()
-    else()
-        list(APPEND _minizip-ng_REQUIRED_VARS minizip-ng_INCLUDE_DIR)
-
-        # Search for minizip-ng.pc
-        find_package(PkgConfig QUIET)
-        pkg_check_modules(PC_minizip-ng QUIET "minizip-ng>=${minizip-ng_FIND_VERSION}")
-
-        # Find include directory
-        find_path(minizip-ng_INCLUDE_DIR
-            NAMES
-                mz.h
-            HINTS
-                ${minizip-ng_ROOT}
-                ${PC_minizip-ng_INCLUDE_DIRS}
-            PATH_SUFFIXES
-                include
-                include/minizip-ng
-                minizip-ng/include
-        )
-
-        # Minizip-ng uses prefix "lib" on all platform by default.
-        # Library name doesn't change in debug.
-
-        # Lib names to search for.
-        # Search for "minizip" since the library could be named "minizip" if it was built 
-        # with MZ_COMPAT=ON.
-        set(_minizip-ng_LIB_NAMES libminizip-ng minizip-ng libminizip minizip)
-
-        if(minizip-ng_STATIC_LIBRARY)
-            # Looking for both "lib" prefix and CMAKE_STATIC_LIBRARY_PREFIX.
-            # Prefer static lib names.
-            set(_minizip-ng_STATIC_LIB_NAMES 
-                "libminizip-ng${CMAKE_STATIC_LIBRARY_SUFFIX}"
-                "${CMAKE_STATIC_LIBRARY_PREFIX}minizip-ng${CMAKE_STATIC_LIBRARY_SUFFIX}"
-                "libminizip${CMAKE_STATIC_LIBRARY_SUFFIX}"
-                "${CMAKE_STATIC_LIBRARY_PREFIX}minizip${CMAKE_STATIC_LIBRARY_SUFFIX}")
-        endif()
-
-        # Find library
-        find_library(minizip-ng_LIBRARY
-            NAMES
-                ${_minizip-ng_STATIC_LIB_NAMES}
-                ${_minizip-ng_LIB_NAMES}
-            HINTS
-                ${minizip-ng_ROOT}
-                ${PC_minizip-ng_LIBRARY_DIRS}
-            PATH_SUFFIXES
-                lib64 lib 
-        )
-
-        # Get version from header or pkg-config
-        if(minizip-ng_INCLUDE_DIR)
-            list(GET minizip-ng_INCLUDE_DIR 0 _minizip-ng_INCLUDE_DIR)
-            if(EXISTS "${_minizip-ng_INCLUDE_DIR}/mz.h")
-                set(_minizip-ng_CONFIG "${_minizip-ng_INCLUDE_DIR}/mz.h")
-            endif()
-        endif()
-
-        if(_minizip-ng_CONFIG)
-            file(STRINGS "${_minizip-ng_CONFIG}" _minizip-ng_VER_SEARCH 
-                REGEX "^[ \t]*#define[ \t]+MZ_VERSION[ \t]+\\(\"[.0-9]+\"\\).*$")
-            if(_minizip-ng_VER_SEARCH)
-                string(REGEX REPLACE ".*#define[ \t]+MZ_VERSION[ \t]+\\(\"([.0-9]+)\"\\).*" 
-                    "\\1" minizip-ng_VERSION "${_minizip-ng_VER_SEARCH}")
-            endif()
-        elseif(PC_minizip-ng_FOUND)
-            set(minizip-ng_VERSION "${PC_minizip-ng_VERSION}")
-        endif()
-    endif()
-
-    # Override REQUIRED if package can be installed
-    if(OCIO_INSTALL_EXT_PACKAGES STREQUAL MISSING)
-        set(minizip-ng_FIND_REQUIRED FALSE)
-    endif()
-
-    include(FindPackageHandleStandardArgs)
-    find_package_handle_standard_args(minizip-ng
-        REQUIRED_VARS 
-            minizip-ng_LIBRARY
-            minizip-ng_INCLUDE_DIR
-        VERSION_VAR
-            minizip-ng_VERSION
-    )
-endif()
-
-###############################################################################
-### Create target
-
-if(minizip-ng_FOUND AND NOT TARGET MINIZIP::minizip-ng)
-    add_library(MINIZIP::minizip-ng UNKNOWN IMPORTED GLOBAL)
-    set(_minizip-ng_TARGET_CREATE TRUE)
-endif()
-
-###############################################################################
-### Configure target ###
-
-if(_minizip-ng_TARGET_CREATE)
-    set_target_properties(MINIZIP::minizip-ng PROPERTIES
-        IMPORTED_LOCATION "${minizip-ng_LIBRARY}"
-        INTERFACE_INCLUDE_DIRECTORIES "${minizip-ng_INCLUDE_DIR}"
-    )
-
-    mark_as_advanced(minizip-ng_INCLUDE_DIR minizip-ng_LIBRARY minizip-ng_VERSION)
-
-    target_link_libraries(MINIZIP::minizip-ng INTERFACE ZLIB::ZLIB)
-endif()
\ No newline at end of file
diff -Naur OpenColorIO/share/cmake/modules/Findpystring.cmake OpenColorIO_BLD/share/cmake/modules/Findpystring.cmake
--- OpenColorIO/share/cmake/modules/Findpystring.cmake	2023-09-20 21:19:44.072141445 -0400
+++ OpenColorIO_BLD/share/cmake/modules/Findpystring.cmake	2023-09-25 10:32:59.073102087 -0400
@@ -41,7 +41,7 @@
         NAMES
             pystring libpystring
         HINTS
-            ${_pystring_SEARCH_DIRS}
+            ${pystring_ROOT}
         PATH_SUFFIXES
             pystring/lib
             lib64
@@ -80,4 +80,4 @@
     )
 
     mark_as_advanced(pystring_INCLUDE_DIR pystring_LIBRARY pystring_VERSION)
-endif()
\ No newline at end of file
+endif()
diff -Naur OpenColorIO/share/cmake/modules/Findyaml-cpp.cmake OpenColorIO_BLD/share/cmake/modules/Findyaml-cpp.cmake
--- OpenColorIO/share/cmake/modules/Findyaml-cpp.cmake	2023-09-20 21:19:44.072141445 -0400
+++ OpenColorIO_BLD/share/cmake/modules/Findyaml-cpp.cmake	1969-12-31 19:00:00.000000000 -0500
@@ -1,168 +0,0 @@
-# SPDX-License-Identifier: BSD-3-Clause
-# Copyright Contributors to the OpenColorIO Project.
-#
-# Locate yaml-cpp
-#
-# Variables defined by this module:
-#   yaml-cpp_FOUND          - Indicate whether the library was found or not
-#   yaml-cpp_LIBRARY        - Path to the library file
-#   yaml-cpp_INCLUDE_DIR    - Location of the header files
-#   yaml-cpp_VERSION        - Library's version
-#
-# Global targets defined by this module:
-#   yaml-cpp
-#
-# For compatibility with the upstream CMake package, the following variables and targets are defined:
-#   yaml-cpp::yaml-cpp      - Alias of the yaml-cpp target
-#   YAML_CPP_LIBRARIES      - Libraries to link against yaml-cpp
-#   YAML_CPP_INCLUDE_DIR    - Include directory
-#
-# Usually CMake will use the dynamic library rather than static, if both are present. 
-# In this case, you may set yaml-cpp_STATIC_LIBRARY to ON to request use of the static one. 
-# If only the static library is present (such as when OCIO builds the dependency), then the option 
-# is not needed.
-#
-# If the library is not installed in a typical location where CMake will find it, you may specify 
-# the location using one of the following methods:
-# -- Set -Dyaml-cpp_DIR to point to the directory containing the CMake configuration file for the package.
-# -- Set -Dyaml-cpp_ROOT to point to the directory containing the lib and include directories.
-# -- Set -Dyaml-cpp_LIBRARY and -Dyaml-cpp_INCLUDE_DIR to point to the lib and include directories.
-#
-
-###############################################################################
-### Try to find package ###
-
-# BUILD_TYPE_DEBUG variable is currently set in one of the OCIO's CMake files. 
-# Now that some OCIO's find module are installed with the library itself (with static build), 
-# a consumer app don't have access to the variables set by an OCIO's CMake files. Therefore, some 
-# OCIO's find modules must detect the build type by itselves.  
-set(BUILD_TYPE_DEBUG OFF)
-if(CMAKE_BUILD_TYPE MATCHES "[Dd][Ee][Bb][Uu][Gg]")
-   set(BUILD_TYPE_DEBUG ON)
-endif()
-
-if(NOT OCIO_INSTALL_EXT_PACKAGES STREQUAL ALL)
-    set(_yaml-cpp_REQUIRED_VARS yaml-cpp_LIBRARY)
-
-    if(NOT DEFINED yaml-cpp_ROOT)
-        # Search for yaml-cpp-config.cmake
-        find_package(yaml-cpp ${yaml-cpp_FIND_VERSION} CONFIG QUIET)
-    endif()
-
-    if(yaml-cpp_FOUND)
-        get_target_property(yaml-cpp_LIBRARY yaml-cpp LOCATION)
-    else()
-
-        # As yaml-cpp-config.cmake search fails, search an installed library
-        # using yaml-cpp.pc .
-
-        list(APPEND _yaml-cpp_REQUIRED_VARS yaml-cpp_INCLUDE_DIR yaml-cpp_VERSION)
-
-        # Search for yaml-cpp.pc
-        find_package(PkgConfig QUIET)
-        pkg_check_modules(PC_yaml-cpp QUIET "yaml-cpp>=${yaml-cpp_FIND_VERSION}")
-
-        # Try to detect the version installed, if any.
-        if(NOT PC_yaml-cpp_FOUND)
-            pkg_search_module(PC_yaml-cpp QUIET "yaml-cpp")
-        endif()
-        
-        # Find include directory
-        find_path(yaml-cpp_INCLUDE_DIR 
-            NAMES
-                yaml-cpp/yaml.h
-            HINTS
-                ${yaml-cpp_ROOT}
-                ${PC_yaml-cpp_INCLUDE_DIRS}
-            PATH_SUFFIXES 
-                include
-                yaml-cpp/include
-                YAML_CPP/include
-        )
-
-        # Lib names to search for
-        set(_yaml-cpp_LIB_NAMES yaml-cpp)
-        if(BUILD_TYPE_DEBUG)
-            # Prefer Debug lib names.
-            list(INSERT _yaml-cpp_LIB_NAMES 0 yaml-cppd)
-        endif()
-
-        if(yaml-cpp_STATIC_LIBRARY)
-            # Prefer static lib names
-            set(_yaml-cpp_STATIC_LIB_NAMES 
-                "${CMAKE_STATIC_LIBRARY_PREFIX}yaml-cpp${CMAKE_STATIC_LIBRARY_SUFFIX}")
-            
-            # Starting from 0.7.0, all platforms uses the suffix "d" for debug.
-            # See https://github.com/jbeder/yaml-cpp/blob/master/CMakeLists.txt#L141
-            if(BUILD_TYPE_DEBUG)
-                list(INSERT _yaml-cpp_STATIC_LIB_NAMES 0
-                    "${CMAKE_STATIC_LIBRARY_PREFIX}yaml-cppd${CMAKE_STATIC_LIBRARY_SUFFIX}")
-            endif()
-        endif()
-
-        # Find library
-        find_library(yaml-cpp_LIBRARY
-            NAMES 
-                ${_yaml-cpp_STATIC_LIB_NAMES}
-                ${_yaml-cpp_LIB_NAMES}
-            HINTS 
-                ${yaml-cpp_ROOT}
-                ${PC_yaml-cpp_LIBRARY_DIRS}
-            PATH_SUFFIXES 
-                lib64
-                lib
-                YAML_CPP/lib
-        )
-
-        # Get version from pkg-config if it was found.
-        if(PC_yaml-cpp_FOUND)
-            set(yaml-cpp_VERSION "${PC_yaml-cpp_VERSION}")
-        endif()
-    endif()
-
-    # Override REQUIRED if package can be installed
-    if(OCIO_INSTALL_EXT_PACKAGES STREQUAL MISSING)
-        set(yaml-cpp_FIND_REQUIRED FALSE)
-    endif()
-
-    include(FindPackageHandleStandardArgs)
-    find_package_handle_standard_args(yaml-cpp
-        REQUIRED_VARS 
-            ${_yaml-cpp_REQUIRED_VARS}
-        VERSION_VAR
-            yaml-cpp_VERSION
-    )
-endif()
-
-###############################################################################
-### Create target
-
-if(yaml-cpp_FOUND AND NOT TARGET yaml-cpp)
-    add_library(yaml-cpp UNKNOWN IMPORTED GLOBAL)
-    set(_yaml-cpp_TARGET_CREATE TRUE)
-endif()
-
-###############################################################################
-### Configure target ###
-
-if(_yaml-cpp_TARGET_CREATE)
-    set_target_properties(yaml-cpp PROPERTIES
-        IMPORTED_LOCATION ${yaml-cpp_LIBRARY}
-        INTERFACE_INCLUDE_DIRECTORIES ${yaml-cpp_INCLUDE_DIR}
-    )
-
-    mark_as_advanced(yaml-cpp_INCLUDE_DIR yaml-cpp_LIBRARY yaml-cpp_VERSION)
-endif()
-
-###############################################################################
-### Set variables for compatibility ###
-
-if(TARGET yaml-cpp AND NOT TARGET yaml-cpp::yaml-cpp)
-    add_library(yaml-cpp::yaml-cpp ALIAS yaml-cpp)
-endif()
-
-if(yaml-cpp_INCLUDE_DIR)
-    set(YAML_CPP_INCLUDE_DIR "${yaml-cpp_INCLUDE_DIR}")
-endif()
-
-set(YAML_CPP_LIBRARIES yaml-cpp::yaml-cpp)
diff -Naur OpenColorIO/share/cmake/modules/FindZLIB.cmake OpenColorIO_BLD/share/cmake/modules/FindZLIB.cmake
--- OpenColorIO/share/cmake/modules/FindZLIB.cmake	1969-12-31 19:00:00.000000000 -0500
+++ OpenColorIO_BLD/share/cmake/modules/FindZLIB.cmake	2023-09-25 10:32:59.077102013 -0400
@@ -0,0 +1,123 @@
+#.rst:
+# FindZLIB
+# --------
+#
+# Find the native ZLIB includes and library.
+#
+# IMPORTED Targets
+# ^^^^^^^^^^^^^^^^
+#
+# This module defines :prop_tgt:`IMPORTED` target ``ZLIB::ZLIB``, if
+# ZLIB has been found.
+#
+# Result Variables
+# ^^^^^^^^^^^^^^^^
+#
+# This module defines the following variables:
+#
+# ::
+#
+#   ZLIB_INCLUDE_DIRS   - where to find zlib.h, etc.
+#   ZLIB_LIBRARIES      - List of libraries when using zlib.
+#   ZLIB_FOUND          - True if zlib found.
+#
+# ::
+#
+#   ZLIB_VERSION_STRING - The version of zlib found (x.y.z)
+#   ZLIB_VERSION_MAJOR  - The major version of zlib
+#   ZLIB_VERSION_MINOR  - The minor version of zlib
+#   ZLIB_VERSION_PATCH  - The patch version of zlib
+#   ZLIB_VERSION_TWEAK  - The tweak version of zlib
+#
+# Backward Compatibility
+# ^^^^^^^^^^^^^^^^^^^^^^
+#
+# The following variable are provided for backward compatibility
+#
+# ::
+#
+#   ZLIB_MAJOR_VERSION  - The major version of zlib
+#   ZLIB_MINOR_VERSION  - The minor version of zlib
+#   ZLIB_PATCH_VERSION  - The patch version of zlib
+#
+# Hints
+# ^^^^^
+#
+# A user may set ``ZLIB_ROOT`` to a zlib installation root to tell this
+# module where to look.
+
+#=============================================================================
+# Copyright 2001-2011 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+set(_ZLIB_SEARCHES)
+
+# Search ZLIB_ROOT first if it is set.
+if(ZLIB_ROOT)
+  set(_ZLIB_SEARCH_ROOT PATHS ${ZLIB_ROOT} NO_DEFAULT_PATH)
+  list(APPEND _ZLIB_SEARCHES _ZLIB_SEARCH_ROOT)
+endif()
+
+# Normal search.
+set(_ZLIB_SEARCH_NORMAL
+  PATHS "[HKEY_LOCAL_MACHINE\\SOFTWARE\\GnuWin32\\Zlib;InstallPath]"
+        "$ENV{PROGRAMFILES}/zlib"
+  )
+list(APPEND _ZLIB_SEARCHES _ZLIB_SEARCH_NORMAL)
+
+set(ZLIB_NAMES z_brl z zlib zdll zlib1 zlibd zlibd1)
+
+# Try each search configuration.
+foreach(search ${_ZLIB_SEARCHES})
+  find_path(ZLIB_INCLUDE_DIR NAMES zlib.h        ${${search}} PATH_SUFFIXES include)
+  find_library(ZLIB_LIBRARY  NAMES ${ZLIB_NAMES} ${${search}} PATH_SUFFIXES lib)
+endforeach()
+
+mark_as_advanced(ZLIB_LIBRARY ZLIB_INCLUDE_DIR)
+
+if(ZLIB_INCLUDE_DIR AND EXISTS "${ZLIB_INCLUDE_DIR}/zlib.h")
+    file(STRINGS "${ZLIB_INCLUDE_DIR}/zlib.h" ZLIB_H REGEX "^#define ZLIB_VERSION \"[^\"]*\"$")
+
+    string(REGEX REPLACE "^.*ZLIB_VERSION \"([0-9]+).*$" "\\1" ZLIB_VERSION_MAJOR "${ZLIB_H}")
+    string(REGEX REPLACE "^.*ZLIB_VERSION \"[0-9]+\\.([0-9]+).*$" "\\1" ZLIB_VERSION_MINOR  "${ZLIB_H}")
+    string(REGEX REPLACE "^.*ZLIB_VERSION \"[0-9]+\\.[0-9]+\\.([0-9]+).*$" "\\1" ZLIB_VERSION_PATCH "${ZLIB_H}")
+    set(ZLIB_VERSION_STRING "${ZLIB_VERSION_MAJOR}.${ZLIB_VERSION_MINOR}.${ZLIB_VERSION_PATCH}")
+
+    # only append a TWEAK version if it exists:
+    set(ZLIB_VERSION_TWEAK "")
+    if( "${ZLIB_H}" MATCHES "ZLIB_VERSION \"[0-9]+\\.[0-9]+\\.[0-9]+\\.([0-9]+)")
+        set(ZLIB_VERSION_TWEAK "${CMAKE_MATCH_1}")
+        set(ZLIB_VERSION_STRING "${ZLIB_VERSION_STRING}.${ZLIB_VERSION_TWEAK}")
+    endif()
+
+    set(ZLIB_MAJOR_VERSION "${ZLIB_VERSION_MAJOR}")
+    set(ZLIB_MINOR_VERSION "${ZLIB_VERSION_MINOR}")
+    set(ZLIB_PATCH_VERSION "${ZLIB_VERSION_PATCH}")
+endif()
+
+# handle the QUIETLY and REQUIRED arguments and set ZLIB_FOUND to TRUE if
+# all listed variables are TRUE
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(ZLIB REQUIRED_VARS ZLIB_LIBRARY ZLIB_INCLUDE_DIR
+                                       VERSION_VAR ZLIB_VERSION_STRING)
+
+if(ZLIB_FOUND)
+    set(ZLIB_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR})
+    set(ZLIB_LIBRARIES ${ZLIB_LIBRARY})
+
+    if(NOT TARGET ZLIB::ZLIB)
+      add_library(ZLIB::ZLIB UNKNOWN IMPORTED)
+      set_target_properties(ZLIB::ZLIB PROPERTIES
+        IMPORTED_LOCATION "${ZLIB_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${ZLIB_INCLUDE_DIRS}")
+    endif()
+endif()
diff -Naur OpenColorIO/src/apps/ocioarchive/CMakeLists.txt OpenColorIO_BLD/src/apps/ocioarchive/CMakeLists.txt
--- OpenColorIO/src/apps/ocioarchive/CMakeLists.txt	2023-09-20 21:19:44.092141132 -0400
+++ OpenColorIO_BLD/src/apps/ocioarchive/CMakeLists.txt	2023-09-25 10:33:03.469020511 -0400
@@ -21,7 +21,7 @@
     PRIVATE
         apputils
         OpenColorIO
-        MINIZIP::minizip-ng
+        MINIZIP::minizip
 )
 
 include(StripUtils)
diff -Naur OpenColorIO/src/cmake/Config.cmake.in OpenColorIO_BLD/src/cmake/Config.cmake.in
--- OpenColorIO/src/cmake/Config.cmake.in	2023-09-20 21:19:44.100141008 -0400
+++ OpenColorIO_BLD/src/cmake/Config.cmake.in	2023-09-25 10:33:03.101027338 -0400
@@ -50,8 +50,8 @@
         endif()
     endif()
 
-    if (NOT TARGET MINIZIP::minizip-ng)
-        find_dependency(minizip-ng @minizip-ng_VERSION@)
+    if (NOT TARGET MINIZIP::minizip)
+        find_dependency(minizip @minizip_VERSION@)
     endif()
 
     # Remove OCIO custom find module path.
diff -Naur OpenColorIO/src/OpenColorIO/CMakeLists.txt OpenColorIO_BLD/src/OpenColorIO/CMakeLists.txt
--- OpenColorIO/src/OpenColorIO/CMakeLists.txt	2023-09-20 21:19:44.076141380 -0400
+++ OpenColorIO_BLD/src/OpenColorIO/CMakeLists.txt	2023-09-25 10:33:03.749015317 -0400
@@ -309,8 +309,8 @@
         "$<BUILD_INTERFACE:utils::from_chars>"
         "$<BUILD_INTERFACE:utils::strings>"
         "$<BUILD_INTERFACE:xxHash>"
-        ${YAML_CPP_LIBRARIES}
-        MINIZIP::minizip-ng
+        yaml-cpp::yaml-cpp
+        MINIZIP::minizip
 )
 
 if(OCIO_USE_SIMD AND OCIO_USE_SSE2NEON AND COMPILER_SUPPORTS_SSE_WITH_SSE2NEON)
@@ -388,20 +388,20 @@
     endif()
 
 
-    # Check for minizip first since our Findminizip module sets minizip-ng_LIBRARY.
+    # Check for minizip first since our Findminizip module sets minizip_LIBRARY.
     if (minizip_LIBRARY)
-        get_filename_component(_minizip-ng_LIBDIR "${minizip_LIBRARY}" DIRECTORY)
-        set(_minizip-ng_NAME "minizip")
-    elseif(minizip-ng_LIBRARY)
-        get_filename_component(_minizip-ng_LIBDIR "${minizip-ng_LIBRARY}" DIRECTORY)
-        set(_minizip-ng_NAME "minizip-ng")
+        get_filename_component(_minizip_LIBDIR "${minizip_LIBRARY}" DIRECTORY)
+        set(_minizip_NAME "minizip")
+    elseif(minizip_LIBRARY)
+        get_filename_component(_minizip_LIBDIR "${minizip_LIBRARY}" DIRECTORY)
+        set(_minizip_NAME "minizip")
     endif()
 
-    if (_minizip-ng_LIBDIR)
+    if (_minizip_LIBDIR)
         # Add the path to CMake list of search paths for libraries.
-        list(APPEND _OCIO_LINK_FLAGS_LIST_ "-Wl,-L${_minizip-ng_LIBDIR}")
-        # Hide the minizip-ng symbols.
-        list(APPEND _OCIO_LINK_FLAGS_LIST_ "-Wl,-hidden-l${_minizip-ng_NAME}")
+        list(APPEND _OCIO_LINK_FLAGS_LIST_ "-Wl,-L${_minizip_LIBDIR}")
+        # Hide the minizip symbols.
+        list(APPEND _OCIO_LINK_FLAGS_LIST_ "-Wl,-hidden-l${_minizip_NAME}")
     endif()
 
     if (_OCIO_LINK_FLAGS_LIST_)
diff -Naur OpenColorIO/tests/cpu/CMakeLists.txt OpenColorIO_BLD/tests/cpu/CMakeLists.txt
--- OpenColorIO/tests/cpu/CMakeLists.txt	2023-09-20 21:19:44.104140948 -0400
+++ OpenColorIO_BLD/tests/cpu/CMakeLists.txt	2023-09-25 10:33:01.381059252 -0400
@@ -37,7 +37,7 @@
             utils::strings
             ${YAML_CPP_LIBRARIES}
             testutils
-            MINIZIP::minizip-ng
+            MINIZIP::minizip
             xxHash
     )
 
