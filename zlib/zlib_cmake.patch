--- zlib/CMakeLists.txt	2024-10-11 11:17:59.054914321 -0400
+++ ZLIB_BLD/CMakeLists.txt	2024-10-11 11:18:48.559900632 -0400
@@ -7,11 +7,11 @@
 
 option(ZLIB_BUILD_EXAMPLES "Enable Zlib Examples" ON)
 
-set(INSTALL_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin" CACHE PATH "Installation directory for executables")
-set(INSTALL_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib" CACHE PATH "Installation directory for libraries")
-set(INSTALL_INC_DIR "${CMAKE_INSTALL_PREFIX}/include" CACHE PATH "Installation directory for headers")
-set(INSTALL_MAN_DIR "${CMAKE_INSTALL_PREFIX}/share/man" CACHE PATH "Installation directory for manual pages")
-set(INSTALL_PKGCONFIG_DIR "${CMAKE_INSTALL_PREFIX}/share/pkgconfig" CACHE PATH "Installation directory for pkgconfig (.pc) files")
+set(INSTALL_BIN_DIR "bin" CACHE PATH "Installation directory for executables")
+set(INSTALL_LIB_DIR "lib" CACHE PATH "Installation directory for libraries")
+set(INSTALL_INC_DIR "include" CACHE PATH "Installation directory for headers")
+set(INSTALL_MAN_DIR "share/man" CACHE PATH "Installation directory for manual pages")
+set(INSTALL_PKGCONFIG_DIR "share/pkgconfig" CACHE PATH "Installation directory for pkgconfig (.pc) files")
 
 include(CheckTypeSize)
 include(CheckFunctionExists)
@@ -57,41 +57,37 @@
 # Check for unistd.h
 #
 check_include_file(unistd.h Z_HAVE_UNISTD_H)
+if(Z_HAVE_UNISTD_H)
+  add_definitions(-DZ_HAVE_UNISTD_H)
+endif(Z_HAVE_UNISTD_H)
+
+option(ENABLE_Z_PREFIX "Add z_ prefix to all library functions." OFF)
+if (DEFINED Z_PREFIX_STR)
+  set (ENABLE_Z_PREFIX ON CACHE BOOL "Ensure prefix is set" FORCE)
+endif (DEFINED Z_PREFIX_STR)
+if (ENABLE_Z_PREFIX)
+  set(Z_PREFIX 1)
+endif (ENABLE_Z_PREFIX)
+mark_as_advanced (ENABLE_Z_PREFIX)
+mark_as_advanced (Z_PREFIX_STR)
 
 if(MSVC)
     set(CMAKE_DEBUG_POSTFIX "d")
     add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
     add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
-    include_directories(${CMAKE_CURRENT_SOURCE_DIR})
 endif()
 
-if(NOT CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)
-    # If we're doing an out of source build and the user has a zconf.h
-    # in their source tree...
-    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h)
-        message(STATUS "Renaming")
-        message(STATUS "    ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h")
-        message(STATUS "to 'zconf.h.included' because this file is included with zlib")
-        message(STATUS "but CMake generates it automatically in the build directory.")
-        file(RENAME ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.included)
-  endif()
-endif()
-
-set(ZLIB_PC ${CMAKE_CURRENT_BINARY_DIR}/zlib.pc)
-configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/zlib.pc.cmakein
-		${ZLIB_PC} @ONLY)
-configure_file(	${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.cmakein
-		${CMAKE_CURRENT_BINARY_DIR}/zconf.h @ONLY)
-include_directories(${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_SOURCE_DIR})
-
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/ZLIBConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/ZLIBConfig.cmake @ONLY)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.in ${CMAKE_CURRENT_BINARY_DIR}/zconf.h @ONLY)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/zlib.h.in  ${CMAKE_CURRENT_BINARY_DIR}/zlib.h  @ONLY)
 
 #============================================================================
 # zlib
 #============================================================================
 
 set(ZLIB_PUBLIC_HDRS
-    ${CMAKE_CURRENT_BINARY_DIR}/zconf.h
-    zlib.h
+  ${CMAKE_CURRENT_BINARY_DIR}/zconf.h
+  ${CMAKE_CURRENT_BINARY_DIR}/zlib.h
 )
 set(ZLIB_PRIVATE_HDRS
     crc32.h
@@ -122,14 +118,8 @@
     zutil.c
 )
 
-if(NOT MINGW)
-    set(ZLIB_DLL_SRCS
-        win32/zlib1.rc # If present will override custom build rule below.
-    )
-endif()
-
 # parse the full version number from zlib.h and include in ZLIB_FULL_VERSION
-file(READ ${CMAKE_CURRENT_SOURCE_DIR}/zlib.h _zlib_h_contents)
+file(READ ${CMAKE_CURRENT_BINARY_DIR}/zlib.h _zlib_h_contents)
 string(REGEX REPLACE ".*#define[ \t]+ZLIB_VERSION[ \t]+\"([-0-9A-Za-z.]+)\".*"
     "\\1" ZLIB_FULL_VERSION ${_zlib_h_contents})
 
@@ -147,16 +137,47 @@
                             -o ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj
                             -i ${CMAKE_CURRENT_SOURCE_DIR}/win32/zlib1.rc)
     set(ZLIB_DLL_SRCS ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj)
+else(MINGW)
+  set(ZLIB_DLL_SRCS ${ZLIB_DLL_SRCS} win32/zlib1.rc)
 endif(MINGW)
 
 add_library(zlib SHARED ${ZLIB_SRCS} ${ZLIB_DLL_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
-target_include_directories(zlib PUBLIC ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
+set_target_properties(zlib PROPERTIES OUTPUT_NAME z_brl)
+target_include_directories(zlib PUBLIC
+	$<INSTALL_INTERFACE:include>
+	PRIVATE ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}
+	)
+if(ENABLE_Z_PREFIX)
+  target_compile_definitions(zlib PUBLIC -DZ_PREFIX)
+endif()
 add_library(zlibstatic STATIC ${ZLIB_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})
-target_include_directories(zlibstatic PUBLIC ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
+if (NOT MSVC)
+  set_target_properties(zlibstatic PROPERTIES OUTPUT_NAME z_brl)
+else (NOT MSVC)
+  set_target_properties(zlibstatic PROPERTIES OUTPUT_NAME z_brl-static)
+endif (NOT MSVC)
+if(CMAKE_CL_64)
+  set_target_properties(zlibstatic PROPERTIES STATIC_LIBRARY_FLAGS "/machine:x64")
+elseif(MSVC)
+  set_target_properties(zlibstatic PROPERTIES STATIC_LIBRARY_FLAGS "/machine:x86")
+endif(CMAKE_CL_64)
+target_include_directories(zlibstatic PUBLIC
+	$<INSTALL_INTERFACE:include>
+	PRIVATE ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}
+	)
+if(ENABLE_Z_PREFIX)
+  target_compile_definitions(zlibstatic PUBLIC -DZ_PREFIX)
+endif()
 set_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)
 set_target_properties(zlib PROPERTIES SOVERSION 1)
 
-if(NOT CYGWIN)
+# OpenBSD has its own naming conventions.  Set a platform variable based on
+# the OS name so we can test for it succinctly.
+if ("${CMAKE_SYSTEM}" MATCHES ".*OpenBSD.*")
+  set(OPENBSD ON)
+endif ("${CMAKE_SYSTEM}" MATCHES ".*OpenBSD.*")
+
+if(NOT CYGWIN AND NOT OPENBSD)
     # This property causes shared libraries on Linux to have the full version
     # encoded into their final filename.  We disable this on Cygwin because
     # it causes cygz-${ZLIB_FULL_VERSION}.dll to be created when cygz.dll
@@ -165,24 +186,26 @@
     # This has no effect with MSVC, on that platform the version info for
     # the DLL comes from the resource file win32/zlib1.rc
     set_target_properties(zlib PROPERTIES VERSION ${ZLIB_FULL_VERSION})
+    set_target_properties(zlib PROPERTIES SOVERSION 1)
 endif()
 
-if(UNIX)
-    # On unix-like platforms the library is almost always called libz
-   set_target_properties(zlib zlibstatic PROPERTIES OUTPUT_NAME z)
-   if(NOT APPLE AND NOT(CMAKE_SYSTEM_NAME STREQUAL AIX))
-     set_target_properties(zlib PROPERTIES LINK_FLAGS "-Wl,--version-script,\"${CMAKE_CURRENT_SOURCE_DIR}/zlib.map\"")
-   endif()
-elseif(BUILD_SHARED_LIBS AND WIN32)
-    # Creates zlib1.dll when building shared library version
-    set_target_properties(zlib PROPERTIES SUFFIX "1.dll")
-endif()
+if (OPENBSD)
+  set_target_properties(zlib PROPERTIES VERSION 1.3)
+endif (OPENBSD)
 
 if(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL )
-    install(TARGETS zlib zlibstatic
-        RUNTIME DESTINATION "${INSTALL_BIN_DIR}"
-        ARCHIVE DESTINATION "${INSTALL_LIB_DIR}"
-        LIBRARY DESTINATION "${INSTALL_LIB_DIR}" )
+	install(TARGETS zlib zlibstatic
+		EXPORT zlibTargets
+		RUNTIME DESTINATION "${INSTALL_BIN_DIR}"
+		ARCHIVE DESTINATION "${INSTALL_LIB_DIR}"
+		LIBRARY DESTINATION "${INSTALL_LIB_DIR}" )
+	install(
+		EXPORT zlibTargets
+		NAMESPACE zlib::
+		DESTINATION ${INSTALL_LIB_DIR}/cmake/ZLIB
+		)
+	install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ZLIBConfig.cmake
+		DESTINATION ${INSTALL_LIB_DIR}/cmake/ZLIB)
 endif()
 if(NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL )
     install(FILES ${ZLIB_PUBLIC_HDRS} DESTINATION "${INSTALL_INC_DIR}")
@@ -216,3 +239,4 @@
         set_target_properties(minigzip64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64")
     endif()
 endif()
+
--- zlib/ZLIBConfig.cmake.in	1969-12-31 19:00:00.000000000 -0500
+++ ZLIB_BLD/ZLIBConfig.cmake.in	2024-10-11 11:19:49.808537825 -0400
@@ -0,0 +1,15 @@
+include("${CMAKE_CURRENT_LIST_DIR}/zlibTargets.cmake")
+
+if(NOT TARGET ZLIB::ZLIB)
+  add_library(ZLIB::ZLIB INTERFACE IMPORTED)
+  add_library(ZLIB::zlib INTERFACE IMPORTED)
+  if(TARGET zlib::zlib)
+    target_link_libraries(ZLIB::ZLIB INTERFACE zlib::zlib)
+    target_link_libraries(ZLIB::zlib INTERFACE zlib::zlib)
+  elseif(TARGET zlib::zlibstatic)
+    target_link_libraries(ZLIB::ZLIB INTERFACE zlib::zlibstatic)
+    target_link_libraries(ZLIB::zlib INTERFACE zlib::zlibstatic)
+  endif()
+endif()
+set(ZLIB_INCLUDE_DIRS "@CMAKE_INSTALL_PREFIX@/@INSTALL_INC_DIR@")
+
