set(CONFIG_FILE configure)
set(ENV_VARS)
set(CONFIG_EXTRA_OPTS)

# Windows uses a different file
if (WIN32)
  set(CONFIG_FILE configure.bat)
endif (WIN32)

# If we're not on Windows, set some environment variables
if (NOT WIN32)
  set(ENV{LD_LIBRARY_PATH} "@CMAKE_BUNDLE_INSTALL_PREFIX@/@LIB_DIR@")
  set(ENV{CPPFLAGS} "-I@CMAKE_BUNDLE_INSTALL_PREFIX@/@INCLUDE_DIR@")
  set(ENV{LDFLAGS} "-L@CMAKE_BUNDLE_INSTALL_PREFIX@/@LIB_DIR@")
endif (NOT WIN32)

# Qt has its own solution for zlib and png - rather than trying to
# coax it into using ours, just go with their solution:
# https://doc.qt.io/qt-6/configure-options.html
set(CONFIG_EXTRA_OPTS ${CONFIG_EXTRA_OPTS} -qt-zlib -qt-libpng)

if ("${CMAKE_BUILD_TYPE}" STREQUAL "" OR "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  set(QT_CONFIG_OPTS "-debug")
elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
  set(QT_CONFIG_OPTS "-release")
else ()
  message(WARNING "Unexpected CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} preparing Qt6")
endif ("${CMAKE_BUILD_TYPE}" STREQUAL "" OR "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")

execute_process(COMMAND @QT_SOURCE_DIR@/${CONFIG_FILE} ${CONFIG_EXTRA_OPTS} ${QT_CONFIG_OPTS} --prefix=@CMAKE_BUNDLE_INSTALL_PREFIX@ RESULT_VARIABLE QT_RET WORKING_DIRECTORY @QT_BUILD_DIR@ OUTPUT_VARIABLE MSG ERROR_VARIABLE MSG)

if (QT_RET)
  message(FATAL_ERROR "Qt configure failed: ${MSG}\n")
endif (QT_RET)

# See if we are building sans GUI, requires defining QT_ALLOW_HEADLESS
#
# Normalize: check cmake or env var for setting.
if (NOT DEFINED QT_ALLOW_HEADLESS AND DEFINED ENV{QT_ALLOW_HEADLESS})
  set(QT_ALLOW_HEADLESS "$ENV{QT_ALLOW_HEADLESS}")
endif()

# Read a cache bool from Qt's build cache
set(qt_cache "@QT_BUILD_DIR@/CMakeCache.txt")
macro(qt_cache_check NAME OUT)
  if (EXISTS "${qt_cache}")
    file(STRINGS "${qt_cache}" _line REGEX "^${NAME}:[^=]*=")
    if (_line)
      string(REGEX REPLACE "^[^=]*=" "" _val "${_line}")
      set(${OUT} "${_val}")
    else()
      set(${OUT} "")
    endif()
  else()
    set(${OUT} "")
  endif()
endmacro()

# check GUI module + platform backends
qt_cache_check("FEATURE_gui"            feature_gui)
qt_cache_check("FEATURE_gtk3"		feature_gtk3)
qt_cache_check("FEATURE_style_windows"  style_windows)
qt_cache_check("FEATURE_style_mac"	style_mac)

# does a window-capable backend exists for this host OS?
set(qt_has_window_gui OFF)
if (feature_gui STREQUAL "ON")
  if (WIN32 AND style_windows STREQUAL "ON")
    set(qt_has_window_gui ON)
  elseif (APPLE AND style_mac STREQUAL "ON")
    set(qt_has_window_gui ON)
  elseif (UNIX AND NOT APPLE AND feature_gtk3 STREQUAL "ON")
    set(qt_has_window_gui ON)
  endif()
endif()

# fail if no GUI by default; allow explicit override with the QT_ALLOW_HEADLESS switch.
if (feature_gui STREQUAL "ON" AND NOT qt_has_window_gui AND NOT QT_ALLOW_HEADLESS)
  message(FATAL_ERROR
    "\nQt GUI configured (QT_FEATURE_gui=ON) but no window-capable platform plugin is enabled.\n"
    "Detected:\n"
    "  FEATURE_gtk3=${feature_gtk3}\n"
    "  FEATURE_style_windows=${style_windows}\n"
    "  FEATURE_style_mac=${style_mac}\n\n"
    "To proceed headless (e.g., offscreen/minimal/vnc), set QT_ALLOW_HEADLESS=ON\n")
elseif (feature_gui STREQUAL "ON" AND NOT qt_has_window_gui AND QT_ALLOW_HEADLESS)
  message(WARNING
    "Proceeding without a window-capable Qt backend (headless).\n"
    "Only minimal/offscreen/eglfs/linuxfb/vnc are expected.")
else()
  message(STATUS "Qt platform backend check: OK (window-capable backend present).")
endif()

message("Qt configure succeeded: ${MSG}\n")

# Local Variables:
# tab-width: 8
# mode: cmake
# indent-tabs-mode: t
# End:
# ex: shiftwidth=2 tabstop=8

