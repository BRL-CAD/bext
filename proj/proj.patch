diff -Naur PROJ.orig/cmake/FindSqlite3.cmake PROJ_BLD/cmake/FindSqlite3.cmake
--- PROJ.orig/cmake/FindSqlite3.cmake	2023-09-18 15:04:48.190998564 -0400
+++ PROJ_BLD/cmake/FindSqlite3.cmake	1969-12-31 19:00:00.000000000 -0500
@@ -1,80 +0,0 @@
-# Find Sqlite3
-# ~~~~~~~~~~~~
-# Copyright (c) 2007, Martin Dobias <wonder.sk at gmail.com>
-# Redistribution and use is allowed according to the terms of the BSD license.
-# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
-#
-# CMake module to search for Sqlite3 library
-#
-# If it's found it sets SQLITE3_FOUND to TRUE
-# and following variables are set:
-#    SQLITE3_INCLUDE_DIR
-#    SQLITE3_LIBRARY
-#    SQLITE3_VERSION
-
-
-# find_path and find_library normally search standard locations
-# before the specified paths. To search non-standard paths first,
-# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH
-# and then again with no specified paths to search the default
-# locations. When an earlier FIND_* succeeds, subsequent FIND_*s
-# searching for the same item do nothing.
-
-# try to use framework on mac
-# want clean framework path, not unix compatibility path
-if(APPLE)
-  if(CMAKE_FIND_FRAMEWORK MATCHES "FIRST"
-      OR CMAKE_FRAMEWORK_PATH MATCHES "ONLY"
-      OR NOT CMAKE_FIND_FRAMEWORK)
-    set(CMAKE_FIND_FRAMEWORK_save ${CMAKE_FIND_FRAMEWORK} CACHE STRING "" FORCE)
-    set(CMAKE_FIND_FRAMEWORK "ONLY" CACHE STRING "" FORCE)
-    #find_path(SQLITE3_INCLUDE_DIR SQLite3/sqlite3.h)
-    find_library(SQLITE3_LIBRARY SQLite3)
-    if(SQLITE3_LIBRARY)
-      # find_path doesn't add "Headers" for a framework
-      set(SQLITE3_INCLUDE_DIR ${SQLITE3_LIBRARY}/Headers
-        CACHE PATH "Path to a file.")
-    endif()
-    set(CMAKE_FIND_FRAMEWORK ${CMAKE_FIND_FRAMEWORK_save} CACHE STRING "" FORCE)
-  endif()
-endif()
-
-find_path(SQLITE3_INCLUDE_DIR sqlite3.h
-  "$ENV{LIB_DIR}/include"
-  "$ENV{LIB_DIR}/include/sqlite"
-  "$ENV{INCLUDE}"
-)
-
-find_library(SQLITE3_LIBRARY NAMES sqlite3_i sqlite3 PATHS
-  "$ENV{LIB_DIR}/lib"
-  "$ENV{LIB}/lib"
-)
-
-if(SQLITE3_INCLUDE_DIR AND SQLITE3_LIBRARY)
-  set(SQLITE3_FOUND TRUE)
-endif()
-
-# Extract version information from the header file
-if(SQLITE3_INCLUDE_DIR)
-    file(STRINGS ${SQLITE3_INCLUDE_DIR}/sqlite3.h _ver_line
-         REGEX "^#define SQLITE_VERSION  *\"[0-9]+\\.[0-9]+\\.[0-9]+\""
-         LIMIT_COUNT 1)
-    string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+"
-           SQLITE3_VERSION "${_ver_line}")
-    unset(_ver_line)
-endif()
-
-
-if(SQLITE3_FOUND)
-  if(NOT SQLITE3_FIND_QUIETLY)
-    message(STATUS "Found Sqlite3: ${SQLITE3_LIBRARY}")
-    message(STATUS "Sqlite3 version: ${SQLITE3_VERSION}")
-  endif()
-
-else()
-
-  if(SQLITE3_FIND_REQUIRED)
-    message(FATAL_ERROR "Could not find Sqlite3")
-  endif()
-
-endif()
diff -Naur PROJ.orig/cmake/FindSQLite3.cmake PROJ_BLD/cmake/FindSQLite3.cmake
--- PROJ.orig/cmake/FindSQLite3.cmake	1969-12-31 19:00:00.000000000 -0500
+++ PROJ_BLD/cmake/FindSQLite3.cmake	2023-09-18 15:05:45.658024885 -0400
@@ -0,0 +1,81 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#[=======================================================================[.rst:
+FindSQLite3
+-----------
+
+.. versionadded:: 3.14
+
+Find the SQLite libraries, v3
+
+IMPORTED targets
+^^^^^^^^^^^^^^^^
+
+This module defines the following :prop_tgt:`IMPORTED` target:
+
+``SQLite::SQLite3``
+
+Result variables
+^^^^^^^^^^^^^^^^
+
+This module will set the following variables if found:
+
+``SQLite3_INCLUDE_DIRS``
+  where to find sqlite3.h, etc.
+``SQLite3_LIBRARIES``
+  the libraries to link against to use SQLite3.
+``SQLite3_EXECNAME``
+  the sqlite3 program name.
+``SQLite3_VERSION``
+  version of the SQLite3 library found
+``SQLite3_FOUND``
+  TRUE if found
+
+#]=======================================================================]
+
+set(_SQLite3_SEARCHES)
+
+# Search SQLite3_ROOT first if it is set.
+if(SQLite3_ROOT)
+  set(_SQLite3_SEARCH_ROOT PATHS ${SQLite3_ROOT} NO_DEFAULT_PATH)
+  list(APPEND _SQLite3_SEARCHES _SQLite3_SEARCH_ROOT)
+endif()
+
+set(SQLite3_NAMES sqlite3 sqlite libsqlite3 libsqlite)
+
+# Try each search configuration.
+foreach(search ${_SQLite3_SEARCHES})
+  find_path(SQLite3_INCLUDE_DIR NAMES sqlite3.h        ${${search}} PATH_SUFFIXES include)
+  find_library(SQLite3_LIBRARY  NAMES ${SQLite3_NAMES} ${${search}} PATH_SUFFIXES lib)
+  find_program(SQLite3_EXECNAME NAMES sqlite3 sqlite   ${${search}} PATH_SUFFIXES bin)
+endforeach()
+
+mark_as_advanced(SQLite3_LIBRARY SQLite3_INCLUDE_DIR)
+
+# Extract version information from the header file
+if(SQLite3_INCLUDE_DIR)
+    file(STRINGS ${SQLite3_INCLUDE_DIR}/sqlite3.h _ver_line
+         REGEX "^#define SQLITE_VERSION  *\"[0-9]+\\.[0-9]+\\.[0-9]+\""
+         LIMIT_COUNT 1)
+    string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+"
+           SQLite3_VERSION "${_ver_line}")
+    unset(_ver_line)
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(SQLite3
+    REQUIRED_VARS SQLite3_INCLUDE_DIR SQLite3_LIBRARY
+    VERSION_VAR SQLite3_VERSION)
+
+# Create the imported target
+if(SQLite3_FOUND)
+    set(SQLite3_INCLUDE_DIRS ${SQLite3_INCLUDE_DIR})
+    set(SQLite3_LIBRARIES ${SQLite3_LIBRARY})
+    if(NOT TARGET SQLite::SQLite3)
+        add_library(SQLite::SQLite3 UNKNOWN IMPORTED)
+        set_target_properties(SQLite::SQLite3 PROPERTIES
+            IMPORTED_LOCATION             "${SQLite3_LIBRARY}"
+            INTERFACE_INCLUDE_DIRECTORIES "${SQLite3_INCLUDE_DIR}")
+    endif()
+endif()
diff -Naur PROJ.orig/CMakeLists.txt PROJ_BLD/CMakeLists.txt
--- PROJ.orig/CMakeLists.txt	2023-09-18 15:04:48.186998634 -0400
+++ PROJ_BLD/CMakeLists.txt	2023-09-18 15:09:09.227266875 -0400
@@ -171,19 +171,14 @@
 # Check for sqlite3
 ################################################################################
 
-find_program(EXE_SQLITE3 sqlite3)
-if(NOT EXE_SQLITE3)
-  message(SEND_ERROR "sqlite3 binary not found!")
-endif()
-
-find_package(Sqlite3 REQUIRED)
-if(NOT SQLITE3_FOUND)
+find_package(SQLite3 REQUIRED)
+if(NOT SQLite3_FOUND)
   message(SEND_ERROR "sqlite3 dependency not found!")
 endif()
 
 # Would build and run with older versions, but with horrible performance
 # See https://github.com/OSGeo/PROJ/issues/1718
-if("${SQLITE3_VERSION}" VERSION_LESS "3.11")
+if("${SQLite3_VERSION}" VERSION_LESS "3.11")
   message(SEND_ERROR "sqlite3 >= 3.11 required!")
 endif()
 
diff -Naur PROJ.orig/data/CMakeLists.txt PROJ_BLD/data/CMakeLists.txt
--- PROJ.orig/data/CMakeLists.txt	2023-09-18 15:04:48.194998499 -0400
+++ PROJ_BLD/data/CMakeLists.txt	2023-09-18 15:15:23.909763968 -0400
@@ -45,7 +45,7 @@
 add_custom_command(
   OUTPUT ${PROJ_DB}
   COMMAND ${CMAKE_COMMAND} -E remove -f ${PROJ_DB}
-  COMMAND ${CMAKE_COMMAND} "-DALL_SQL_IN=${ALL_SQL_IN}" "-DEXE_SQLITE3=${EXE_SQLITE3}" "-DPROJ_DB=${PROJ_DB}" "-DPROJ_VERSION=${PROJ_VERSION}" "-DPROJ_DB_CACHE_DIR=${PROJ_DB_CACHE_DIR}"
+  COMMAND ${CMAKE_COMMAND} "-DALL_SQL_IN=${ALL_SQL_IN}" "-DSQLite3_EXECNAME=${SQLite3_EXECNAME}" "-DPROJ_DB=${PROJ_DB}" "-DPROJ_VERSION=${PROJ_VERSION}" "-DPROJ_DB_CACHE_DIR=${PROJ_DB_CACHE_DIR}"
     -P "${CMAKE_CURRENT_SOURCE_DIR}/generate_proj_db.cmake"
   COMMAND ${CMAKE_COMMAND} -E copy ${PROJ_DB} ${CMAKE_CURRENT_BINARY_DIR}/for_tests
   DEPENDS ${SQL_FILES} "${CMAKE_CURRENT_SOURCE_DIR}/generate_proj_db.cmake"
diff -Naur PROJ.orig/data/generate_proj_db.cmake PROJ_BLD/data/generate_proj_db.cmake
--- PROJ.orig/data/generate_proj_db.cmake	2023-09-18 15:04:48.194998499 -0400
+++ PROJ_BLD/data/generate_proj_db.cmake	2023-09-18 15:15:37.557556391 -0400
@@ -30,7 +30,7 @@
   endif()
 endif()
 
-execute_process(COMMAND "${EXE_SQLITE3}" "${PROJ_DB}"
+execute_process(COMMAND "${SQLite3_EXECNAME}" "${PROJ_DB}"
                 INPUT_FILE "${ALL_SQL_IN}"
                 RESULT_VARIABLE STATUS)
 
diff -Naur PROJ.orig/docs/source/install.rst PROJ_BLD/docs/source/install.rst
--- PROJ.orig/docs/source/install.rst	2023-09-18 15:04:48.266997276 -0400
+++ PROJ_BLD/docs/source/install.rst	2023-09-18 15:16:04.925138944 -0400
@@ -324,15 +324,15 @@
     .. versionchanged:: 7.0
         Renamed from ``ENABLE_LTO``.
 
-.. option:: EXE_SQLITE3
+.. option:: SQLite3_EXECNAME
 
     Path to an ``sqlite3`` or ``sqlite3.exe`` executable.
 
-.. option:: SQLITE3_INCLUDE_DIR
+.. option:: SQLite3_INCLUDE_DIR
 
     Path to an include directory with the ``sqlite3.h`` header file.
 
-.. option:: SQLITE3_LIBRARY
+.. option:: SQLite3_LIBRARY
 
     Path to a shared or static library file, such as ``sqlite3.dll``,
     ``libsqlite3.so``, ``sqlite3.lib`` or other name.
diff -Naur PROJ.orig/src/lib_proj.cmake PROJ_BLD/src/lib_proj.cmake
--- PROJ.orig/src/lib_proj.cmake	2023-09-18 15:04:48.426994567 -0400
+++ PROJ_BLD/src/lib_proj.cmake	2023-09-18 15:08:02.632191414 -0400
@@ -438,8 +438,8 @@
   target_link_libraries(proj PRIVATE ${CMAKE_THREAD_LIBS_INIT})
 endif()
 
-target_include_directories(proj PRIVATE ${SQLITE3_INCLUDE_DIR})
-target_link_libraries(proj PRIVATE ${SQLITE3_LIBRARY})
+target_include_directories(proj PRIVATE ${SQLite3_INCLUDE_DIR})
+target_link_libraries(proj PRIVATE ${SQLite3_LIBRARY})
 
 if(NLOHMANN_JSON STREQUAL "external")
   target_compile_definitions(proj PRIVATE EXTERNAL_NLOHMANN_JSON)
diff -Naur PROJ.orig/test/unit/CMakeLists.txt PROJ_BLD/test/unit/CMakeLists.txt
--- PROJ.orig/test/unit/CMakeLists.txt	2023-09-18 15:04:48.462993957 -0400
+++ PROJ_BLD/test/unit/CMakeLists.txt	2023-09-18 15:08:21.783927671 -0400
@@ -76,7 +76,7 @@
 #
 
 include_directories(${PROJ_SOURCE_DIR}/include)
-include_directories(${SQLITE3_INCLUDE_DIR})
+include_directories(${SQLite3_INCLUDE_DIR})
 # Add the directory containing proj_config.h
 include_directories(${PROJ_BINARY_DIR}/src)
 
@@ -150,7 +150,7 @@
 target_link_libraries(proj_test_cpp_api
   PRIVATE GTest::gtest
   PRIVATE ${PROJ_LIBRARIES}
-  PRIVATE ${SQLITE3_LIBRARY})
+  PRIVATE ${SQLite3_LIBRARY})
 add_test(NAME proj_test_cpp_api COMMAND proj_test_cpp_api)
 set_property(TEST proj_test_cpp_api
   PROPERTY ENVIRONMENT ${PROJ_TEST_ENVIRONMENT})
@@ -182,7 +182,7 @@
 target_link_libraries(test_network
   PRIVATE GTest::gtest
   PRIVATE ${PROJ_LIBRARIES}
-  PRIVATE ${SQLITE3_LIBRARY})
+  PRIVATE ${SQLite3_LIBRARY})
 add_test(NAME test_network COMMAND test_network)
 set_property(TEST test_network
   PROPERTY ENVIRONMENT ${PROJ_TEST_ENVIRONMENT})
